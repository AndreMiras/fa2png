{"version":3,"sources":["components/Nav.jsx","components/CaptureButton.jsx","components/CustomInput.jsx","components/IconPicker.jsx","components/IconInput.jsx","components/ColorInput.jsx","components/SizeInputWithSlider.jsx","components/ConfigureIcon.jsx","components/IconPreview.jsx","components/Container.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["Nav","Navbar","bg","variant","expand","className","Brand","href","process","Toggle","Collapse","Link","capture","element","domtoimage","toPng","then","dataUrl","base64URL","win","window","open","document","write","close","windowLocation","catch","error","console","getIconCanvas","getElementById","CaptureButton","Dropdown","as","ButtonGroup","Button","onClick","icon","split","Menu","Item","eventKey","link","createElement","download","click","Append","children","InputGroup","Text","CustomInput","onChange","prepend","value","append","appendText","Prepend","FormControl","aria-label","e","target","defaultProps","Icon","name","Col","fixedWidth","IconList","icons","onIconClick","Row","map","PopoverTitle","Popover","Title","Form","Control","type","placeholder","PopoverContent","Content","IconPicker","React","forwardRef","ref","props","useState","iconsYaml","setIconsYaml","filteredIcons","setFilteredIcons","useEffect","fetch","iconsPath","response","text","yaml","safeLoad","yamlDoc","Object","keys","filter","styles","includes","filterStyles","str","renderOverlay","OverlayTrigger","trigger","placement","transition","rootClose","overlay","IconInput","customPopover","color","substring","hex","ColorInput","SizeInput","toString","CustomSlider","max","SizeInputWithSlider","ConfigureIcon","onIconChange","iconValue","onColorChange","colorValue","onSizeChange","sizeValue","Card","Header","Body","IconPreview","size","id","style","fontSize","Container","iconProperties","setIconProperties","property","md","lg","Footer","version","library","add","fas","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0e39a52a.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Nav as ReactNav, Navbar } from 'react-bootstrap';\n\nconst Nav = () => (\n  <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" className=\"mb-4\">\n    <Container>\n      <Navbar.Brand href={process.env.PUBLIC_URL}>FontAwesome to PNG</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <ReactNav className=\"mr-auto\">\n          <ReactNav.Link href={process.env.PUBLIC_URL}>Home</ReactNav.Link>\n          <ReactNav.Link href=\"https://github.com/AndreMiras/fa2png\">About</ReactNav.Link>\n        </ReactNav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Nav;\n","import React from 'react';\nimport domtoimage from 'dom-to-image';\nimport { Button, ButtonGroup, Dropdown } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n/*\n * Workaround for Chrome no longer aligning redirect from JS.\n * https://stackoverflow.com/a/45789588/185510\n */\nconst windowLocation = (base64URL) => {\n  const win = window.open();\n  win.document.write(\n    `<iframe src=\"${base64URL}\" frameborder=\"0\" style=\"border:0; top:0px; left:0px; bottom:0px; right:0px; width:100%; height:100%;\" allowfullscreen></iframe>`,\n  );\n  win.document.close();\n};\n\nconst capture = (element) => {\n  domtoimage.toPng(element)\n    .then((dataUrl) => {\n      windowLocation(dataUrl);\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('oops, something went wrong!', error);\n    });\n};\n\nconst captureAndDownload = (element) => {\n  domtoimage.toPng(element)\n    .then((dataUrl) => {\n      const link = document.createElement('a');\n      link.download = 'image.png';\n      link.href = dataUrl;\n      link.click();\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error('oops, something went wrong!', error);\n    });\n};\n\nconst getIconCanvas = () => (\n  document.getElementById('icon-canvas')\n);\n\nconst CaptureButton = () => (\n  <Dropdown as={ButtonGroup}>\n    <Button onClick={() => capture(getIconCanvas())}>\n      <FontAwesomeIcon icon=\"magic\" />\n      {' '}\n      Capture\n    </Button>\n    <Dropdown.Toggle split />\n    <Dropdown.Menu>\n      <Dropdown.Item eventKey=\"1\">\n        <Button variant=\"link\" onClick={() => captureAndDownload(getIconCanvas())}>\n          <FontAwesomeIcon icon=\"download\" />\n          {' '}\n          Capture & Download\n        </Button>\n      </Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nexport default CaptureButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormControl, InputGroup } from 'react-bootstrap';\n\nconst Append = ({ children }) => (\n  <InputGroup.Append>\n    <InputGroup.Text>\n      {children}\n    </InputGroup.Text>\n  </InputGroup.Append>\n);\nAppend.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n  ]).isRequired,\n};\n\nconst CustomInput = ({\n  onChange, prepend, value, append, appendText,\n}) => (\n  <InputGroup className=\"mb-3\">\n    <InputGroup.Prepend>\n      <InputGroup.Text>{prepend}</InputGroup.Text>\n    </InputGroup.Prepend>\n    <FormControl aria-label=\"icon\" value={value} onChange={(e) => onChange(e.target.value)} />\n    {append == null ? <Append>{appendText}</Append> : append}\n  </InputGroup>\n);\nCustomInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  prepend: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n  ]).isRequired,\n  value: PropTypes.string.isRequired,\n  append: PropTypes.element,\n  appendText: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n  ]),\n};\nCustomInput.defaultProps = {\n  append: null,\n  appendText: null,\n};\n\nexport default CustomInput;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Col, Button, Form, Popover, Row,\n} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport yaml from 'js-yaml';\nimport iconsPath from '@fortawesome/fontawesome-free/metadata/icons.yml';\n\nconst fetchIconsYamlDoc = () => (\n  fetch(iconsPath)\n    .then((response) => response.text())\n    .then((text) => yaml.safeLoad(text))\n);\n\nconst filterStyles = (yamlDoc) => (\n  Object.keys(yamlDoc).filter(\n    (icon) => yamlDoc[icon].styles.includes('solid'),\n  )\n);\n\nconst Icon = ({ name, onClick }) => (\n  <Col className=\"mb-3\">\n    <Button onClick={() => onClick(name)}>\n      <FontAwesomeIcon icon={name} fixedWidth />\n    </Button>\n  </Col>\n);\nIcon.propTypes = {\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nconst IconList = ({ icons, onIconClick }) => (\n  <Row className=\"no-gutters\">\n    {icons.map((icon) => <Icon key={icon} name={icon} onClick={onIconClick} />)}\n  </Row>\n);\nIconList.propTypes = {\n  icons: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onIconClick: PropTypes.func.isRequired,\n};\n\nconst PopoverTitle = ({ onChange }) => (\n  <Popover.Title as=\"h3\">\n    <Form>\n      <Form.Control type=\"text\" placeholder=\"Type to filter\" onChange={onChange} />\n    </Form>\n  </Popover.Title>\n);\nPopoverTitle.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nconst PopoverContent = ({ icons, onIconClick }) => (\n  <Popover.Content>\n    <IconList icons={icons} onIconClick={onIconClick} />\n  </Popover.Content>\n);\nPopoverContent.propTypes = IconList.propTypes;\n\n/**\n * Note custom `Popover` require props (and refs) to be passed\n * https://github.com/react-bootstrap/react-bootstrap/issues/1345\n */\nconst IconPicker = React.forwardRef(({ onChange, ...props }, ref) => {\n  const [iconsYaml, setIconsYaml] = useState([]);\n  const [filteredIcons, setFilteredIcons] = useState([]);\n  const filterIcon = (value) => (\n    setFilteredIcons(iconsYaml.filter((str) => str.includes(value)))\n  );\n  useEffect(() => {\n    fetchIconsYamlDoc().then((yamlDoc) => {\n      const icons = filterStyles(yamlDoc);\n      setIconsYaml(icons);\n      setFilteredIcons(icons);\n    });\n  }, []);\n  return (\n    /* eslint-disable react/jsx-props-no-spreading */\n    <Popover ref={ref} {...props}>\n      <PopoverTitle onChange={(e) => filterIcon(e.target.value)} />\n      <PopoverContent icons={filteredIcons} onIconClick={onChange} />\n    </Popover>\n  );\n});\nIconPicker.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default IconPicker;\n","import React from 'react';\nimport {\n  OverlayTrigger, InputGroup, Button,\n} from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport CustomInput from './CustomInput';\nimport IconPicker from './IconPicker';\n\nconst renderOverlay = ({ onChange }) => (\n  <IconPicker onChange={onChange} />\n);\n\nconst Append = ({ onChange, value }) => (\n  <InputGroup.Append>\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      transition={false}\n      rootClose\n      overlay={renderOverlay({ onChange })}\n    >\n      <Button variant=\"outline-secondary\">\n        <FontAwesomeIcon icon={value} />\n      </Button>\n    </OverlayTrigger>\n  </InputGroup.Append>\n);\nAppend.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nconst IconInput = ({ onChange, value }) => (\n  <CustomInput\n    onChange={onChange}\n    prepend=\"Icon\"\n    value={value}\n    append={<Append onChange={onChange} value={value} />}\n  />\n);\nIconInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default IconInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ChromePicker } from 'react-color';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  OverlayTrigger, Popover, InputGroup, Button,\n} from 'react-bootstrap';\nimport CustomInput from './CustomInput';\n\nconst customPopover = (onChange, value) => (\n  <Popover>\n    <Popover.Title as=\"h3\">Color</Popover.Title>\n    <Popover.Content>\n      <ChromePicker color={value.substring(1)} onChange={(color) => onChange(color.hex)} />\n    </Popover.Content>\n  </Popover>\n);\n\nconst Append = ({ onChange, value }) => (\n  <InputGroup.Append>\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      transition={false}\n      rootClose\n      overlay={customPopover(onChange, value)}\n    >\n      <Button variant=\"outline-secondary\">\n        <FontAwesomeIcon icon=\"palette\" />\n      </Button>\n    </OverlayTrigger>\n  </InputGroup.Append>\n);\nAppend.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nconst ColorInput = ({ onChange, value }) => (\n  <CustomInput\n    onChange={onChange}\n    prepend=\"Color\"\n    value={value}\n    append={<Append onChange={onChange} value={value} />}\n  />\n);\nColorInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default ColorInput;\n","import React from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport PropTypes from 'prop-types';\nimport { Col, Row } from 'react-bootstrap';\nimport CustomInput from './CustomInput';\n\nconst SizeInput = ({ onChange, value }) => (\n  <CustomInput onChange={onChange} prepend=\"Size\" value={value.toString()} appendText=\"px\" />\n);\nSizeInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst CustomSlider = ({ onChange, value }) => (\n  <Row>\n    <Col className=\"mb-3\">\n      <Slider onChange={onChange} value={value} max={500} />\n    </Col>\n  </Row>\n);\nCustomSlider.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst SizeInputWithSlider = ({ onChange, value }) => (\n  <>\n    <SizeInput onChange={onChange} value={value} />\n    <CustomSlider onChange={onChange} value={value} />\n  </>\n);\nSizeInputWithSlider.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default SizeInputWithSlider;\n","import React from 'react';\nimport './ConfigureIcon.css';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\nimport CaptureButton from './CaptureButton';\nimport IconInput from './IconInput';\nimport ColorInput from './ColorInput';\nimport SizeInputWithSlider from './SizeInputWithSlider';\n\nconst ConfigureIcon = ({\n  onIconChange, iconValue, onColorChange, colorValue, onSizeChange, sizeValue,\n}) => (\n  <Card className=\"ConfigureIcon\">\n    <Card.Header>Configure icon</Card.Header>\n    <Card.Body>\n      <IconInput onChange={onIconChange} value={iconValue} />\n      <ColorInput onChange={onColorChange} value={colorValue} />\n      <SizeInputWithSlider onChange={onSizeChange} value={sizeValue} />\n      <CaptureButton />\n    </Card.Body>\n  </Card>\n);\nConfigureIcon.propTypes = {\n  onIconChange: PropTypes.func.isRequired,\n  iconValue: PropTypes.string.isRequired,\n  onColorChange: PropTypes.func.isRequired,\n  colorValue: PropTypes.string.isRequired,\n  onSizeChange: PropTypes.func.isRequired,\n  sizeValue: PropTypes.number.isRequired,\n};\n\nexport default ConfigureIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Card } from 'react-bootstrap';\n\nconst IconPreview = ({ icon, size, color }) => (\n  <Card>\n    <Card.Header>Icon preview</Card.Header>\n    <Card.Body>\n      <div id=\"icon-canvas\" className=\"text-center\">\n        <FontAwesomeIcon\n          id=\"icon-target\"\n          icon={icon}\n          style={{ fontSize: `${size}px`, color }}\n        />\n      </div>\n    </Card.Body>\n  </Card>\n);\nIconPreview.propTypes = {\n  icon: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n  size: PropTypes.number.isRequired,\n};\n\nexport default IconPreview;\n","import React, { useState } from 'react';\nimport { Col, Container as ReactContainer, Row } from 'react-bootstrap';\nimport ConfigureIcon from './ConfigureIcon';\nimport IconPreview from './IconPreview';\n\nconst Container = () => {\n  const [iconProperties, setIconProperties] = useState({\n    icon: 'paw',\n    color: '#333333',\n    size: 100,\n  });\n  const onChange = (property) => (value) => (\n    setIconProperties({ ...iconProperties, [property]: value })\n  );\n  return (\n    <ReactContainer>\n      <Row>\n        <Col md={5} lg={4}>\n          <ConfigureIcon\n            onIconChange={onChange('icon')}\n            iconValue={iconProperties.icon}\n            onColorChange={onChange('color')}\n            colorValue={iconProperties.color}\n            onSizeChange={onChange('size')}\n            sizeValue={iconProperties.size}\n          />\n        </Col>\n        <Col md={7} lg={8}>\n          <IconPreview\n            icon={iconProperties.icon}\n            color={iconProperties.color}\n            size={iconProperties.size}\n          />\n        </Col>\n      </Row>\n    </ReactContainer>\n  );\n};\n\nexport default Container;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { version } from '../../package.json';\n\nconst Footer = () => (\n  <footer className=\"footer d-none d-md-block\">\n    <Container className=\"text-center\">\n      <span>\n        Copyright &copy; Andre Miras 2020 - fa2png v\n        {version}\n      </span>\n    </Container>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport Nav from './components/Nav';\nimport Container from './components/Container';\nimport Footer from './components/Footer';\n\nlibrary.add(fas);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Container />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}